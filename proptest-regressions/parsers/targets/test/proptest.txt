# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc ad1a64c471d86dc77be8c1df4d1810b16418a19526cdb189f23a6072fd359d59 # shrinks to (action, input, mut names) = (NewRule { targets: [FileName(Sym(1))], deps: [FileName(Sym(2))], double_colon: false, initial_command: None }, "\\\\:\\:", NameCache { file_names: StringInterner { map: {InternalStrRef(0x7f2f9c0038c0): Sym(1), InternalStrRef(0x7f2f9c0037f0): Sym(2)}, values: ["\\", ":"] }, variable_names: StringInterner { map: {}, values: [] } })
cc 5f7f5e8c6ecf193494600f0e1aba2b03e798907d55f127ed3b25aeed29011525 # shrinks to (action, input, mut names) = (NewRule { targets: [FileName(Sym(1))], deps: [FileName(Sym(1))], double_colon: false, initial_command: None }, "\\\\ : \\\\", NameCache { file_names: StringInterner { map: {InternalStrRef(0x7fa8d4002c50): Sym(1)}, values: ["\\"] }, variable_names: StringInterner { map: {}, values: [] } })
cc 58e01ac68ab311e7d9ce213d687e47bb66a2053bec2cbaf5383202e2928aa1d5 # shrinks to (action, input, mut names) = (NewRule { targets: [FileName(Sym(1))], deps: [FileName(Sym(2))], double_colon: false, initial_command: None }, "\\: : a", NameCache { file_names: StringInterner { map: {InternalStrRef(0x7f2f40000bf0): Sym(1), InternalStrRef(0x7f2f40001190): Sym(2)}, values: [":", "a"] }, variable_names: StringInterner { map: {}, values: [] } })
cc da1a26afb4716ca454cff1206dbcff49ac75da454dc3ea36303b51b7f0851e26 # shrinks to (action, input, mut names) = (NewRule { targets: [FileName(Sym(1))], deps: [FileName(Sym(2))], double_colon: false, initial_command: Some(AstNode { source_location: Marker { inner: TestLocation { line: 1, character: 11 } }, children: Constant(Located { location: Marker { inner: TestLocation { line: 1, character: 11 } }, contents: "b" }) }) }, "\\: : \\\\\\;;b", NameCache { file_names: StringInterner { map: {InternalStrRef(0x7f6eac006fb0): Sym(1), InternalStrRef(0x7f6eac006980): Sym(2)}, values: [":", ";"] }, variable_names: StringInterner { map: {}, values: [] } })
